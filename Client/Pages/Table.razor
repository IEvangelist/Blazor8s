@page "/table"

@inject NavigationManager NavigationManager
@implements IAsyncDisposable

@if (HasJoinedGame)
{
    <h1>Joined Game</h1>
}

<div class="row">
    <div class="col">
        <h1>Players</h1>
        <ul class="list-group">
            @foreach (var player in _players)
            {
                <li class="list-group-item">@player</li>
            }
        </ul>
    </div>
    <div class="col">
        <h1>Draw Pile</h1>

        <div class="pcard back">
            <span>@_deckCount</span>
        </div>
    </div>
    <div class="col">
        <h1>Discard Pile</h1>
        @if (_discardCard == null)
        {
            <span>Game not started</span>
        }
        else
        {
            <PlayingCard Card="_discardCard"></PlayingCard>
        }
    </div>
</div>

@code {

    List<string> _players = new();
    private HubConnection _hubConnection;
    bool HasJoinedGame = false;
    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;
    Card _discardCard;
    int _deckCount = 52;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
              .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
              .Build();

        _hubConnection.On("JoinedGame", () =>
        {
            HasJoinedGame = true;
            StateHasChanged();
        });

        _hubConnection.On<string>(nameof(IGameHub.PlayerJoined), PlayerJoined);
        _hubConnection.On<int, Card>(nameof(IGameHub.GameStarted), GameStarted);
        _hubConnection.On<Card>(nameof(IGameHub.DiscardPlayed), DiscardPlayed);
        _hubConnection.On<int>(nameof(IGameHub.UpdateDeckCount), UpdateDeckCount);

        await _hubConnection.StartAsync();

        await _hubConnection.SendAsync("TableJoinGame");
    }

    void GameStarted(int count, Card card)
    {
        _deckCount = count;
        _discardCard = card;
        StateHasChanged();
    }

    void UpdateDeckCount(int count)
    {
        _deckCount = count;
        StateHasChanged();
    }

    void DiscardPlayed(Card card)
    {
        _discardCard = card;
        StateHasChanged();
    }

    void PlayerJoined(string player)
    {
        _players.Add(player);
        StateHasChanged();
    }

    ValueTask IAsyncDisposable.DisposeAsync() => _hubConnection.DisposeAsync();
}